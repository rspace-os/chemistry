package com.researchspace.chemistry.image.generator;

import com.researchspace.chemistry.image.ImageDTO;
import com.researchspace.chemistry.util.CommandExecutor;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/***
 * Image generator which uses OpenBabel to perform image generation from a chemical in its original format. Images
 * generated by this class have a high success rate, however the images aren't as of good quality/likeness to the
 * original as those generated with Indigo.
 */
@Service
public class OpenBabelOriginalFormatImageGenerator extends BaseImageGenerator {
  private static final Logger LOGGER =
      LoggerFactory.getLogger(OpenBabelOriginalFormatImageGenerator.class);

  private final CommandExecutor commandExecutor;

  public OpenBabelOriginalFormatImageGenerator(CommandExecutor commandExecutor) {
    this.commandExecutor = commandExecutor;
  }

  @Override
  public byte[] generateImage(ImageDTO imageDTO) {
    File inFile = null;
    File outFile = null;
    try {
      inFile = File.createTempFile("temp-", ".cdxml");
      outFile = File.createTempFile("temp-", "." + imageDTO.outputFormat());

      byte[] chemBytes = getChemBytes(imageDTO.input());

      Files.write(inFile.toPath(), chemBytes);

      ProcessBuilder builder = new ProcessBuilder();

      builder.command(
          "obabel",
          inFile.getAbsolutePath(),
          "-xd",
          "-O",
          outFile.getAbsolutePath(),
          "-h" + imageDTO.height(),
          "-w" + imageDTO.width());

      commandExecutor.executeCommand(builder);

      return Files.readAllBytes(outFile.toPath());
    } catch (IOException | ExecutionException | InterruptedException | TimeoutException e) {
      return handleError(OpenBabelOriginalFormatImageGenerator.class.getName(), e, imageDTO);
    } finally {
      try {
        Files.delete(inFile.toPath());
        Files.delete(outFile.toPath());
      } catch (IOException e) {
        LOGGER.warn("Unable to delete temp files.", e);
      }
    }
  }

  private byte[] getChemBytes(String input) {
    if (input.length() % 4 != 0) {
      return input.getBytes();
    }
    if (Base64.isBase64(input)) {
      try {
        return java.util.Base64.getDecoder().decode(input.getBytes());
      } catch (IllegalArgumentException e) {
        // unencoded inputs such as smiles can be incorrectly identified as base64
        return input.getBytes();
      }
    }
    return input.getBytes();
  }
}
